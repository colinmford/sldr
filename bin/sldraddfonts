#!/usr/bin/python3

from langtag import lookup #, langtag
from palaso.sldr.ldml import Ldml
import csv
import os
import os.path
import argparse

suggestions = dict()


def main():
    parser = argparse.ArgumentParser(description='Populate font information to LDML files')
    parser.add_argument("sldr", help="root of SLDR tree to write into")
    parser.add_argument('datafile', help='CSV file export from Google Sheet document Script2Font')
    parser.add_argument('--version', action='version', version='%(prog)s: 0.1')
    args = parser.parse_args()

    read_font_data(args.datafile)
    write_font_data(args.sldr)


def read_font_data(data_file_name):
    """Read CSV data file"""
    font_sources = ('WSTech primary', 'NLCI', 'Microsoft', 'Other', 'Noto Sans', 'Noto Serif', 'WSTech secondary')
    with open(data_file_name, 'r', newline='') as data_file:
        reader = csv.DictReader(data_file)
        for row in reader:
            # Construct font tag
            script = row['Code']
            ft = script
            for region in row['Region'].split(', '):
                if region != '':
                    ft = script + '-' + region

                # Assemble list of fonts for the font tag
                fonts = list()
                for font_source in font_sources:
                    font = row[font_source]
                    if font:
                        if ',' in font:
                            for multiple_font in font.split(', '):
                                fonts.append(multiple_font)
                        else:
                            fonts.append(font)
                if len(fonts) > 0:
                    suggestions[ft] = fonts


def find_fonts(locale):
    """Return a list of preferred fonts"""

    # Find script and possibly region
    region = None
    try:
        ts = lookup(locale, matchRegions=True, use639=True)
        script = ts.script
        region = ts.region
    except KeyError:
        print(f'Cannot find locale {locale}, using fallback')
        return ['Charis SIL']

    # Find font
    ft = script
    if region:
        ft = script + '-' + region
    if ft in suggestions:
        return suggestions[ft]
    elif script in suggestions:
        return suggestions[script]
    return ['Charis SIL']


def write_font_data(sldrtree):
    """Write preferred font information to SLDR"""
    for rootpath, dirnames, filenames in os.walk(sldrtree):
        for filename in filenames:
            if filename.endswith('.xml'):
                # Find preferred font
                locale, ext = os.path.splitext(filename)
                locale = locale.replace('_', '-')
                preferred_fonts = find_fonts(locale)

                # Write preferred  font to LDML file
                default = '[@types="default"]'
                for preferred_font in preferred_fonts:
                    filepath = os.path.join(sldrtree, rootpath, filename)
                    ldml = Ldml(filepath)
                    resource = ldml.ensure_path(f'special/sil:external-resources/sil:font[@name="{preferred_font}"]{default}/sil:url')[0]
                    resource.text = 'https://wirl.api.sil.org/' + preferred_font.replace(' ', '')
                    ldml.save_as(filepath, topns=True)
                    default = '' # only the first font is the default font


if __name__ == '__main__':
    main()
